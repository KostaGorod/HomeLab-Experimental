version: "3.3"

services:
  traefik:
    image: traefik:v2.7.0
    restart: always
    container_name: traefik
    ports:
      - "80:80" # <== http
      - "8080:8080" # <== :8080 is where the dashboard runs on
      - "443:443" # <== https
      #- "4000:4000" #test port in hot file
    command:
      - --api.insecure=true # <== Enabling insecure api via 8080, NOT RECOMMENDED FOR PRODUCTION
      - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc.
      - --api.debug=true # <== Enabling additional endpoints for debugging and profiling
      - --log.level=DEBUG # <== Setting the level of the logs from traefik
      - --providers.docker=true # <== Enabling docker as the provider for traefik
      - --providers.docker.watch=true
      - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik
      - --providers.file.directory=/etc/traefik # <== Referring to a dynamic configuration file INSIDE THE CONTAINER ITSELF
      - --providers.file.watch=true
      - --providers.docker.network=traefik-proxy # <== Operate on the docker network named web
      - --entrypoints.web.address=:80 # <== Defining an entrypoint for port :80 named web
      - --entrypoints.web-secure.address=:443 # <== Defining an entrypoint for https on port :443 (not really needed)
      #- --entrypoints.web-port.address=:4000 # <== Example how to create entryport
      #- --certificatesresolvers.mytlschallenge.acme.tlschallenge=true # <== Enable TLS-ALPN-01 (not really needed)
      #- --certificatesresolvers.mytlschallenge.acme.email=you@youremail # <== Set your email (not really needed)
      #- --certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json # <== SSL stuff we don't need.

    volumes:
      #- ./letsencrypt:/letsencrypt # <== Volume for certs (TLS) (not really needed)
      #- /var/run/docker.sock:/var/run/docker.sock # <== Volume for docker admin
      #- /docker/traefik/dynamic.yaml:/dynamic.yaml # <== Volume for dynamic conf file, **ref: line 27
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /srv/traefik/log:/var/log
      - /srv/traefik/etc:/etc/traefik
      #- /srv/traefik/letsencrypt:/letsencrypt
    networks:
      - default
      - traefik-proxy # <== Placing traefik on the network named traefik-proxy, to access containers on this network
      - tunnel
    labels:
      - "traefik.enable=true" # <== Enable traefik on itself to view dashboard and assign subdomain to view it
      #- "traefik.http.routers.traefik-dashboard.entrypoints=web-secure"
      - traefik.http.routers.traefik-dashboard.tls=true # <== HTTPS
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.internal.mydomain.ltd`)" # <== Setting the domain for the dashboard
      - "traefik.http.routers.traefik-dashboard.service=api@internal" # <== Enabling the dashboard to be a service to access (mendatory only here the, the container itself assigned when not configured by auto)
      - traefik.http.routers.traefik-dashboard.middlewares=adminsonly@file # <== Whitelist for AdminIPs
      
  whoami:
    # A container that exposes an API to show its IP address (for tests)
    image: traefik/whoami
    labels:
      - traefik.enable=true
      - traefik.http.routers.whoami.tls=true
      #- traefik.http.routers.whoami.middlewares=adminsonly@file
      - "traefik.http.routers.whoami.rule=Host(`who.internal.mydomain.ltd`) || Host(`who`) || Host(`endpoint2.mydomain.ltd`)" 

networks:
  traefik-proxy:
    external: true
  tunnel:
    external: true
